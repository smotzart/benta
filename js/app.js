// Generated by CoffeeScript 1.12.3
(function() {
  Array.prototype.append = function(el) {
    if (this.push != null) {
      this.push(el);
    }
    return this;
  };

  angular.module('app', ['vcRecaptcha', 'ngRoute', 'ngResource', 'ngSanitize', 'ngAnimate', 'angular-loading-bar', 'slickCarousel']).factory('APIProducts', [
    '$resource', function($resource) {
      return $resource('https://kernl.rocks/api/v2/public/entries/:id.json', {
        id: '@id',
        storage_id: 25
      });
    }
  ]).factory('APICompanies', [
    '$resource', function($resource) {
      return $resource('https://kernl.rocks/api/v2/public/entries.json?storage_id=27');
    }
  ]).factory('APIContact', [
    '$resource', function($resource) {
      return $resource('/misc/contact.php');
    }
  ]).run(['$rootScope'].append(function(root) {})).config([
    '$routeProvider', '$locationProvider', 'cfpLoadingBarProvider', function(r, l, c) {
      c.includeSpinner = true;
      l.html5Mode(true);
      l.hashPrefix('');
      r.when('/', {
        controller: 'ProductsCtrl',
        templateUrl: "html/products.html"
      });
      r.when('/:id-:name', {
        controller: 'ProductCtrl',
        templateUrl: "html/product.html"
      });
      return r.otherwise({
        redirectTo: '/'
      });
    }
  ]).controller('AppCtrl', [
    '$scope', 'vcRecaptchaService', 'APIProducts', 'APICompanies', 'APIContact', 'cfpLoadingBar', '$filter', function(self, vcRecaptchaService, APIProducts, APICompanies, APIContact, cfpLoadingBar, $filter) {
      self.capcha = '6Ld89C8UAAAAAKARpvwzC2nhwKuCayqtd4n5000A';
      self.companies = APICompanies.query({}, function(data) {
        var c, j, len, results;
        results = [];
        for (j = 0, len = data.length; j < len; j++) {
          c = data[j];
          results.push({
            key: c.key,
            order: c.order,
            title: c.title,
            logo: c.logo[0].file_small_url,
            inverse: c.inverse[0].file_small_url
          });
        }
        return self.companies = results;
      });
      self.getLogo = function(company) {
        company = $filter('filter')(self.companies, {
          'key': company
        });
        if (company.length !== 1) {
          return;
        }
        return company[0].logo;
      };
      self.urlName = function(title) {
        return title.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');
      };
      (self.resetContact = function() {
        if (self.contactform) {
          self.contactform.$setPristine();
        }
        return self.contact = new APIContact({
          response: '',
          name: '',
          email: '',
          message: ''
        });
      })();
      self.widgetContact = null;
      self.setWidgetId = function(widgetId) {
        return self.widgetContact = widgetId;
      };
      self.formShow = false;
      self.formMessage = '';
      self.formStatus = true;
      self.loadContact = false;
      self.sendContact = function() {
        self.loadContact = true;
        return self.contact.$save({}, (function(data) {
          self.formShow = true;
          self.loadContact = false;
          self.resetContact();
          self.formStatus = true;
          self.formHeding = 'Danke!';
          self.formMessage = 'Ihre Nachricht wurde erfolgreich versendet. Wir werden uns in Kürze bei Ihnen Melden.';
          return vcRecaptchaService.reload(self.widgetContact);
        }), (function(data) {
          self.formShow = true;
          self.formStatus = false;
          self.formHeding = 'Error!';
          self.formMessage = data.data;
          self.loadContact = false;
          return vcRecaptchaService.reload(self.widgetContact);
        }));
      };
      return self.hideAlert = function() {
        return self.formShow = false;
      };
    }
  ]).controller('ProductsCtrl', [
    '$scope', 'APIProducts', 'APICompanies', function(self, APIProducts, APICompanies) {
      var filter;
      APIProducts.query({}, function(data) {
        return self.products = data.map(function(x) {
          x.order = parseInt(x.order, 10);
          return x;
        });
      });
      filter = {
        category: [],
        company: []
      };
      self.toggleFilter = function(key, value) {
        if (filter[key].indexOf(value) === -1) {
          return filter[key].push(value);
        } else {
          return filter[key].splice(filter[key].indexOf(value), 1);
        }
      };
      self.toggleClass = function(key, value) {
        if (filter[key].indexOf(value) === -1) {
          return false;
        }
        return true;
      };
      return self.filterProducts = function(item) {
        if (filter.category.length === 0 && filter.company.length === 0) {
          return true;
        }
        if (filter.category.length > 0 && filter.company.length > 0) {
          if (filter.category.indexOf(item.category) !== -1 && filter.company.indexOf(item.company) !== -1) {
            return true;
          }
          return false;
        }
        if (filter.category.length > 0) {
          if (filter.category.indexOf(item.category) !== -1) {
            return true;
          }
        }
        if (filter.company.length > 0) {
          if (filter.company.indexOf(item.company) !== -1) {
            return true;
          }
        }
        return false;
      };
    }
  ]).controller('ProductCtrl', [
    '$scope', '$routeParams', 'APIProducts', 'APICompanies', '$filter', function(self, $routeParams, APIProducts, APICompanies, $filter) {
      APIProducts.query({}, function(data) {
        var forfilter;
        forfilter = data.sort(function() {
          return 0.5 - Math.random();
        });
        return self.products = $filter('limitTo')(forfilter, 3);
      });
      self.allowslick = false;
      self.id = $routeParams.id;
      self.n_links = [];
      self.product = APIProducts.get({
        id: self.id
      }, function(data) {
        var i, j, k, len, link, links;
        if (data.links) {
          links = data.links.split("\n");
          for (j = 0, len = links.length; j < len; j++) {
            link = links[j];
            link = link.split("|");
            self.n_links.push({
              title: link[0],
              href: link.length === 2 ? link[1] : link[0],
              type: 'link'
            });
          }
        }
        for (i = k = 1; k <= 10; i = ++k) {
          if (self.product["file" + i].length > 0) {
            self.n_links.push({
              title: self.product["file" + i + "text"] ? self.product["file" + i + "text"] : self.product["file" + i][0].file_name,
              href: self.product["file" + i][0].file_url,
              type: 'file'
            });
          }
        }
        return self.allowslick = true;
      });
      return self.slickConfig = {
        dots: false,
        infinite: true,
        enabled: true,
        autoplay: false,
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: true,
        useTransform: false,
        adaptiveHeight: false,
        prevArrow: '<span class="slim-prev btn btn-block btn-outline-primary">‹</span>',
        nextArrow: '<span class="slim-next btn btn-block btn-outline-primary">›</span>'
      };
    }
  ]);

}).call(this);
